Joinpoints:

	A joinpoint is a well-defined point during the execution of your application.
	Typical examples of joinpoints include a call to a method, the Method Invocation itself, class initialization, and object instantiation. 
	Joinpoints are a core concept of AOP and define the points in your 
	application at which you can insert additional logic using AOP.


Advice: 

	The code that is executed at a particular joinpoint is the advice. 
	There are many different types of advice, such as 
		before, which executes before the joinpoint, and 
		after, which executes after it. 
		
	In OOP, an advice comes in the form of a method within a class.
	

Pointcuts: 

	A pointcut is a collection of joinpoints that you use to define when advice should be executed. 
	By creating pointcuts, you gain fine-grained control over how you apply advice to the components in your application. 
	As mentioned previously, a typical joinpoint is a Method Invocation. A typical pointcut is the collection of all Method Invocations in a particular class.
	Often you can compose pointcuts in complex relationships to further constrain when advice is executed.
	

Aspects: 

	An aspect is the combination of advice and pointcuts. This combination results in a definition of the logic that should be included in the application and where it should execute.

Weaving: 

	This is the process of actually inserting aspects into the application code at the appropriate point.
	For compile-time AOP solutions, this is, unsurprisingly, done at compile time, usually as an extra step in the build process. 
	
	Likewise, for runtime AOP solutions, the weaving process is executed dynamically at runtime. 
	AspectJ supports another weaving mechanism called load-time weaving (LTW), in which it intercepts the underlying JVM class loader and provides weaving to the bytecode when it is being loaded by the class loader.

Target: 

	An object whose execution flow is modified by some AOP process is referred to as the target object. Often you see the target object referred to as the advised object.

Introduction: 

	This is the process by which you can modify the structure of an object by introducing additional methods or fields to it. 
	You can use introduction to make any object implement a specific interface without needing the object's class to implement that interface explicitly.
	
	
	


Advice Types in spring



Before - MethodBeforeAdvice

AfterReturning - AfterReturningAdvice - if method executed succesfull

After - AfterAdvice

throws - ThrowsAdvice - of method threw an execption


around - MethodInterceptor 



AOP : The concept of join points, matched by pointcuts, is the key to AOP


spring only supports method execution join point


*****************************************************************************
declare an aspect using java

@Aspect  - from aspectj
@pointcut - used for giving name to a specific point cut



declare an aspect using config

<aop:advisor pointcut="com.xyz.someapp.SystemArchitecture.businessService()" advice-ref="tx-advice"/>