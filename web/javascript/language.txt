Executed in top down order

case sensitive

camel casing


statments are not rquired to end with ;

but good to do so for minification purpose

javascript is weakly typed language



1. Simple types

	string
	number
	boolean
	null
	undefined
	
	Infinity
	NaN
	
	
   Declaration

	var varible = literal
	
	
	scope - global or function
		
		global if declareed without using var 
		

	function scope

		this allows closures(function closure) ie functions with referencing environment

		this has an impact of lifecycle of variables to be exposed out side the block in which they are declared 
		
		
    Conversion
    

	parseInt(var)
	parseFloat(var)
	Number(var)
	String(var)
	Boolean(var)
	
	Obj.valueOf()
	
	using operators
	
	 + try to covert to number
	 !! tries to convert to boolean
	 

	

 Operators

	typeof   -  give the type of ref object
	
	unary +
	unary -
	-
	+
	*
	/
	%
	++
	--
	
	assignment 
	
	+=
	-=
	*=
	/=
	%=
	<<==
	>>=
	>>>=
	&=
	!=
	
	
	bitwise 
	
	<< - left shift
	>> - right shift
	>>> right shift fill 0
	&
	|
	^
	~
	
	logical
	
	&&
	||
	!
	
	(?:)
	
	
	Relational
	
	<
	>
	<=
	>=
	!=
	==
	!==
	===  - check for equality without type conversion


2. Complex types

	Object
	Array
	Function


	
	  Definition
	  	
	  	a. using function constructor
	  	
	  	   e.g function NAME() {
	  	   	
	  	   	this.memeber
	  	   	
	  	   	this.mehtod = function() {};
	  	   	
	  	   	
	  	       }
	  	
	  	b. using { prop1: val1 , prop2: val2, ... }
	  	  
	  	  e.g
	  	  
	  	  var myDog = {
		     name : "Angus"
		     city : "San Diego",
		     age : 11,
		     state : "CA",
		     friendly : true,
		     greeting : function() { alert("woof woof!"); }
		  };
	  	
	  	
	  	
		prototype inheritance
		
		Object.create(parent object instance)
		
		

	Operators
	
		delete
		instanceof
		in - evals if the first operand is property of second operand(object)
		new
		void - assign undefined value
		. - property access
		["prop"] - property access
		(a,b,c) - like c varible value will be last value
	